#!/usr/bin/env python3

import json
import os
import signal
import argparse
import time


def do_exit(_exit, close_delay=2):
    if _exit:
        print("closing window")
        time.sleep(close_delay)
        os.kill(os.getppid(), signal.SIGHUP)
    else:
        exit()

def broker_connection(config_data, name, remote, _exit):
    if remote:
        if name not in config_data:
            print("Invalid value for name")
            print(f"Options: {list(config_data.keys())}")
            do_exit(_exit, 5)

        host = config_data[name]["remote"]["host"]
        port = config_data[name]["remote"]["port"]
        user = config_data[name]["remote"]["user"]
    else:
        if name not in config_data:
            print("Invalid value for name")
            print(f"Options: {list(config_data.keys())}")
            do_exit(_exit, 5)

        host = config_data[name]["local"]["host"]
        port = config_data[name]["local"]["port"]
        user = config_data[name]["local"]["user"]

    cmd = f"ssh -o ConnectTimeout=5 {user}@{host} -p {port}"

    start_time = time.time()

    #print(cmd)
    os.system(cmd)

    end_time = time.time()
    time_diff = end_time - start_time

    if time_diff < 6 and not remote:
        print("Retrying with remote connection")
        broker_connection(config_data, name, True, _exit)
    else:
        print("quick-ssh session complete")

    do_exit(_exit)


parser = argparse.ArgumentParser()
parser.add_argument(
    "name",
    help="The name or list of names of to connect to:       Example: quick-ssh dev1,dev2,dev3"
)
parser.add_argument(
    '-r',
    "--remote",
    help="Specifies to use the remote connection configuration",
    action='store_true',
    required=False
)
parser.add_argument(
    "-e",
    "--exit-on-close",
    help="Will exit the terminal window when passed",
    action='store_true',
    required=False
)

args = parser.parse_args()

remote = args.remote
exit_on_close = args.exit_on_close

with open("/usr/local/lib/quick-ssh-config.json") as config_file:
    raw_data = config_file.read()
    config_data = json.loads(raw_data)
    name = str(args.name).split(",")

    if len(name) > 1:
        remote_mod = ""
        if remote:
            remote_mod = " -r"

        name = name[::-1]

        first_name = name.pop()

        for n in name:
            os.popen(f"osascript -e 'tell app \"Terminal\" to do script \"quick-ssh {n}{remote_mod} -e\"'")

        broker_connection(config_data, first_name, remote_mod, exit_on_close)
    else:
        broker_connection(config_data, name[0], remote, exit_on_close)
